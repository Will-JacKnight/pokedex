{"ast":null,"code":"import React,{useState}from\"react\";import PokemonCard from\"./PokemonCard\";import heartImg from\"../images/heart.svg\";import closeImg from\"../images/closeSymbol.svg\";import{ClipLoader}from'react-spinners';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const API_BASE_URL=process.env.REACT_APP_API_BASE_URL||'http://localhost:5000';// sidebar component\nconst Sidebar=()=>{const[isOpen,setIsOpen]=useState(false);// state to store if sidebar is open or not\nconst[favourite,setFavourite]=useState([]);// state to store favourite pokemons\nconst[loading,setLoading]=useState(false);// state to store loading status\n// function to fetch favourite pokemons from backend\nasync function handleFavourite(){try{// get request to backend to fetch favourite pokemons\nconst response=await fetch(`${API_BASE_URL}/favourite`,{method:'GET',headers:{Authorization:`Bearer ${sessionStorage.getItem('access_token')}`}});if(!response.ok){throw response;}const data=await response.json();setFavourite(Object.values(data));// convert dictionary to array and store in favourite state\n}catch(reponse){// if response is not successful, remove JWT token and tell user to login again\nif(reponse.status===401){sessionStorage.removeItem('access_token');alert('Token issue. Please login again');}else{alert('Something went wrong. Please try again later');}}finally{setLoading(false);}}// function to toggle sidebar\nconst toggleSidebar=()=>{// if user is logged in, toggle sidebar and fetch favourite pokemons\nif(sessionStorage.getItem('access_token')){setIsOpen(!isOpen);handleFavourite();}// if user is not logged in, tell user to login\nelse{alert(\"Please login to see your favourite pokemons\");}};// mapping over the favourite pokemons to render PokemonCard components\nconst pokemonEl=favourite===null||favourite===void 0?void 0:favourite.map((pokemon,index)=>{return/*#__PURE__*/_jsx(PokemonCard,{pokemon:pokemon,index:index,sidebar:true});});// returning the JSX for the sidebar\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"img\",{src:heartImg,alt:\"heart img\",onClick:toggleSidebar,className:\"toggle-button\"}),/*#__PURE__*/_jsxs(\"div\",{className:`sidebar ${isOpen?\"open\":\"\"}`,children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Your Pokemons\"}),/*#__PURE__*/_jsx(\"h3\",{className:\"add-favourite-msg\",children:\"To add pokemons to your favourites, double click the pokemon card!\"}),loading&&/*#__PURE__*/_jsx(ClipLoader,{color:\"black\",size:50,className:\"loader\"}),!loading&&favourite.length===0&&/*#__PURE__*/_jsx(\"p\",{children:\"You haven't added any pokemons to your favourites\"}),/*#__PURE__*/_jsx(\"img\",{src:closeImg,alt:\"close img\",onClick:toggleSidebar,className:\"close-sidebar\"}),/*#__PURE__*/_jsx(\"div\",{className:\"pokemon-poster-list sidebar-list\",children:pokemonEl})]}),isOpen&&/*#__PURE__*/_jsx(\"div\",{className:\"overlay\"})]});};export default Sidebar;","map":{"version":3,"names":["React","useState","PokemonCard","heartImg","closeImg","ClipLoader","jsx","_jsx","jsxs","_jsxs","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","Sidebar","isOpen","setIsOpen","favourite","setFavourite","loading","setLoading","handleFavourite","response","fetch","method","headers","Authorization","sessionStorage","getItem","ok","data","json","Object","values","reponse","status","removeItem","alert","toggleSidebar","pokemonEl","map","pokemon","index","sidebar","children","src","alt","onClick","className","color","size","length"],"sources":["C:/Users/Kumar/Desktop/SSE_POKEMON/pokedex/frontend-app/src/components/Sidebar.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport PokemonCard from \"./PokemonCard\";\r\nimport heartImg from \"../images/heart.svg\";\r\nimport closeImg from \"../images/closeSymbol.svg\"\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000';\r\n\r\n// sidebar component\r\nconst Sidebar = () => {\r\n  const [isOpen, setIsOpen] = useState(false); // state to store if sidebar is open or not\r\n  const [favourite, setFavourite] = useState([]); // state to store favourite pokemons\r\n  const [loading, setLoading] = useState(false); // state to store loading status\r\n\r\n  // function to fetch favourite pokemons from backend\r\n  async function handleFavourite() {\r\n    try {\r\n      // get request to backend to fetch favourite pokemons\r\n      const response = await fetch(`${API_BASE_URL}/favourite`, {\r\n        method: 'GET',\r\n        headers: {\r\n          Authorization: `Bearer ${sessionStorage.getItem('access_token')}`,\r\n        },\r\n      });\r\n      if(!response.ok){\r\n        throw response;\r\n      }\r\n      const data = await response.json();\r\n      setFavourite(Object.values(data)); // convert dictionary to array and store in favourite state\r\n    } catch(reponse) {\r\n      // if response is not successful, remove JWT token and tell user to login again\r\n      if (reponse.status === 401) {\r\n        sessionStorage.removeItem('access_token');\r\n        alert('Token issue. Please login again');\r\n      }\r\n      else {\r\n        alert('Something went wrong. Please try again later');\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  // function to toggle sidebar\r\n  const toggleSidebar = () => {\r\n    // if user is logged in, toggle sidebar and fetch favourite pokemons\r\n    if(sessionStorage.getItem('access_token')) {\r\n      setIsOpen(!isOpen);\r\n      handleFavourite();\r\n    }\r\n    // if user is not logged in, tell user to login\r\n    else {\r\n      alert(\"Please login to see your favourite pokemons\");\r\n    }\r\n  };\r\n\r\n  // mapping over the favourite pokemons to render PokemonCard components\r\n  const pokemonEl = favourite?.map((pokemon, index) => {\r\n    return (\r\n        <PokemonCard pokemon={pokemon} index={index} sidebar={true}>\r\n        </PokemonCard>\r\n    );\r\n  })\r\n\r\n  // returning the JSX for the sidebar\r\n  return (\r\n    <div>\r\n        <img src={heartImg} alt=\"heart img\" onClick={toggleSidebar} className=\"toggle-button\" />\r\n        <div className={`sidebar ${isOpen ? \"open\" : \"\"}`}>\r\n            <h2>Your Pokemons</h2>\r\n            <h3 className=\"add-favourite-msg\">To add pokemons to your favourites, double click the pokemon card!</h3>\r\n             {/* conditionally rendering the loader */}\r\n            {loading && <ClipLoader\r\n                  color={\"black\"}\r\n                  size={50}\r\n                  className='loader'\r\n                />\r\n            }\r\n            {/* if favourite pokemons are not found, show message */}\r\n            {!loading && favourite.length === 0 && <p>You haven't added any pokemons to your favourites</p>}\r\n            <img src={closeImg} alt=\"close img\" onClick={toggleSidebar} className=\"close-sidebar\" />\r\n            <div className='pokemon-poster-list sidebar-list'>\r\n                {pokemonEl}\r\n            </div>\r\n        </div>\r\n        {isOpen && <div className=\"overlay\"></div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}